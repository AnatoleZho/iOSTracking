
数据分析中，一般都采用 "事件模型"（Event 模型）来描述用户在产品中的各种行为或者动作

事件模型包含 事件（Event） 和用户（User）两个最核心的实体

一般来说，一个事件（Event）就是描述一个 用户(Who) 在某个 时间点(When)、某个地方(Where)、以某种方式(How) 完成某个具体的 事情(What)
五要素：
  * Who:   参与这个事件的用户（DistinctID 用户标识）
  * When:  事件发生时间
  * Where: 事件发生地点（比如，通过 IP 地址解析出省市区，记录经纬度）
  * How:   用户触发这个事件的方式（比如：使用设备信息，浏览器，应用程序版本号，操作系统版本号，渠道信息等）
  * What:  用户做事情的具体内容（比如，对于一个搜索类型的事件，可能需要记录的字段有： 搜索的关键词，搜索类型等）
  

When 因素即时间：
        1.事件发生的时间戳
        2.统计事件持续的时长
        
事件发生的时间戳：
  通过手机设备时间戳采集时间，但是手机设备的时间戳有可能不准确，这样会导致采集到的的时间不符合实际情况
  ”时间纠正“ 策略：
       事件发生时间 与 服务器收到请求时间相差较大  服务器进行时间纠正
    
统计事件持续时长：
   用户某个行为或动作持续了多长时间（比如观看视频）
   
   实现：新增两个方法
   开始计时： -trackTimerStart:
   停止计时： -trackTimerEnd:properties：


事件的暂停与恢复：视频播放，游戏暂停等
    暂停统计事件时长方法：-trackTimerPause:
    恢复统计事件时长方法：-trackTimerResume:
    
    
后台状态下的事件时长：
    在应用引入后台时，应该调用暂停方法 -trackTimerPause：将所有为暂停的统计事件暂停；当应用进入前台运行时，调用时间恢复方法 -trackTimerResume： 将之前已暂停的事件恢复统计
    
    
全埋点事件时长：
  $AppEnd 事件时长： 应用程序进入前台处于活跃状态到进入后台的整个运行时间间隔。 $AppEnd 事件时长基本代表了 用户此次使用应用时长
  实现：当收到 UIApplicationDidBecomeActiveNotification 本地通知时，调用 -trackTimerStart：
       当收到 UIAPplicationDidEnterBackgroundNotification 本地通知时，调用 -trackTimerEnd:properties:
       
       
  
 $AppViewScreen：
    实现： viewDidAppear 和 viewDidDisappear 方法分别调用 start 和 end
          存在问题： 如果应用进入后台或是 闪退，程序强杀，最后一个页面无法统计
                   嵌套页面会出现覆盖问题
        ********************************************************************************
        使用 Session 来解决：
        ***********
        如何使用Sensors Analytics 进行 Session 分析
        ********************************************************************************
