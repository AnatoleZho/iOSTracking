
沙盒机制：每个应用程序都自己一个独立存储空间。 原理：通过重定向技术，把应用程序生成和修改的文件重定向到自身文件夹中

文件缓存：
    1. 使用 NSKeyedArchiver 类将字典对象归档并写入文件
    2. 使用 NSJSONSerialization 类将字典转换成 JSON 格式字符串写入文件
    
问题：1. 如果在主线程中触发事件，那么读取、写入、删除事件都是在主线程进行，会出现 卡住线程 问题
     2. 在无网络环境下，如果文件中缓存大量的事件，会导致内存过大，影响程序性能
     
     
     多线程优化：异步执行串行队列
     
     内存优化： 设置一个本地可缓存的最大事件条数（maxLocalEventCount）当本地已缓存的时间条数超过本地可缓存最大事件条数时，删除最旧的的事件数据，以保证最新的事件数据可以正常缓存


数据库缓存
    SQLite
    优化：1. 每次插入和查询数据时，都执行”准备执行 SQL语句“的操作，比较浪费资源
         2. 在查询和删除操作时，如果数据库中没有存储数据，其实无需执行SQL语句
         
    1. 缓存 sqlite3_stmt
        在采集过程中，插入和查询都比较频繁，对于插入事件 -insertEvent: 每次操作 SQL 语句都相同，因此”预解析SQL语句“秩序执行一次即可。由于每次需要绑定不同的数据，只需要重置下之前 sqlite3_stmt 即可，然后绑定新的数据即可
        对于查询事件 -selectEventsForCount: 方法，由于在查询 SQL 语句中，有一个查询时间数据条数的参数，导致 SQL 语句每次都可能发生改变，但从实际情况看，一般是不会变化的，因此，引入一个静态变量 lastSelectEventCOunt来记录上次查询事件的条数，然后判断 SQL语句是否有改变
        
    2. 缓存时间总条数
       查询被堵已存储事件条数 或 同步策略：本地存储达到一定条数时需要同步数据
